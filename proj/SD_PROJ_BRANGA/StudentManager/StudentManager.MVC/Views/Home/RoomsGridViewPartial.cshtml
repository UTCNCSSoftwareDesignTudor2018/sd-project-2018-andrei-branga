@using System.Web.UI.WebControls

﻿@functions{
    object GetEditingProduct(ASPxGridView grid)
    {
        if (grid.IsNewRowEditing)
            return new RoomViewModel();
        return grid.GetRow(grid.EditingRowVisibleIndex);
    }
}
@{
        var grid = Html.DevExpress().GridView(settings =>
        {
        settings.Name = "RoomGrid";
        settings.CallbackRouteValues = new { Controller = "Home", Action = "RoomsGridViewPartial", hotelId = ViewData["HotelId"] };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Home", Action = "RoomsGridViewPartialAddNew", hotelId = ViewData["HotelId"] };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Home", Action = "RoomsGridViewPartialDelete", hotelId = ViewData["HotelId"] };
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = false;


            settings.CommandColumn.CustomButtons.Add(new GridViewCommandColumnCustomButton { ID = "btnGetKey", Text = "Details" });
            settings.ClientSideEvents.CustomButtonClick =
                string.Format("function(s, e) {{ CustomButtonClick(s, e, '{0}'); }}", Url.Action("DetailsRoom", "Home"));


        settings.KeyFieldName = "RoomId";
        settings.Width = Unit.Percentage(100);
        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add("RoomName");
        settings.Columns.Add("HotelName");
        settings.Columns.Add("Details");
       
        settings.Columns.Add(c =>
        {
            c.FieldName = "RoomTypeId";
            c.Caption = "Room Type";
            c.EditorProperties().ComboBox(p =>
            {
                p.TextField = "RoomType1";
                p.ValueField = "RoomTypeId";
                p.ValueType = typeof(int);
                p.DataSource = ViewBag.RoomTypes;
            });
        });


        settings.EditFormLayoutProperties.ColCount = 2;
        settings.EditFormLayoutProperties.Items.Add("RoomTypeId");
        settings.EditFormLayoutProperties.Items.Add("RoomName");
        settings.EditFormLayoutProperties.Items.Add("Details");

        settings.EditFormLayoutProperties.Items.AddCommandItem(itemSettings =>
        {
            itemSettings.Width = Unit.Percentage(100);
            itemSettings.HorizontalAlign = FormLayoutHorizontalAlign.Right;
        });
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 700;
    });
if (ViewData["EditError"] != null)
{
grid.SetEditErrorText((string) ViewData["EditError"]);
}
}
@grid.Bind(Model).GetHtml()

